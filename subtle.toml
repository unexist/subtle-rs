#
# Author::  Christoph Kappel <christoph@unexist.dev>
# Version:: $Id$
# License:: GNU GPLv3
#
# = Subtle default configuration
#
# This file will be installed as default and can also be used as a starter for
# an own custom configuration file. The system wide config usually resides in
# +/etc/xdg/subtle+ and the user config in +HOME/.config/subtle+, both locations
# are dependent on the locations specified by +XDG_CONFIG_DIRS+ and
# +XDG_CONFIG_HOME+.
#

#
# == Options
#
# Following options change behaviour and sizes of the window manager:
#

[subtle]
# Window move/resize steps in pixel per keypress
increase_step = 5

# Window screen border snapping
border_snap = 10

# Default starting gravity for windows. Comment out to use gravity of
# currently active client
default_gravity = "center"

# Make dialog windows urgent and draw focus
urgent_dialogs = false

# Honor resize size hints globally
honor_size_hints = false

# Enable gravity tiling for all gravities
gravity_tiling = false

# Enable click-to-focus focus model
click_to_focus = false

# Skip pointer movement on e.g. gravity change
skip_pointer_warp = false

# Skip pointer movement to urgent windows
skip_urgent_warp = false

# Set the WM_NAME of subtle (Java quirk)
#wmname = "LG3D"

# == Styles
#
# Styles define various properties of styleable items in a CSS-like syntax.
#
# Following properties are available for most the styles:
#
# [*foreground*] Foreground text color
# [*background*] Background color
# [*margin*]     Outer spacing
# [*border*]     Border color and size
# [*padding*]    Inner spacing
# [*font*]       Font string (xftontsel or xft)
#

#
# === Links
#
# https://subtle.rs/projects/subtle/wiki/Styles

# Style for all style elements
[[style]]
kind = "all"
foreground = "#757575"
background = "#202020"
icon = "#757575"
padding = [0, 3]
font = "-*-*-*-*-*-*-14-*-*-*-*-*-*-*"
#font = "xft:sans-8"

# Style for the all views
[[style]]
kind = "views"
#border = [ "#757575", 2 ]
border_color = "#757575"
border_width = 2

# Style for the active views
[[style]]
kind = "views_active"
foreground = "#fecf35"

border_width = 2
border_top_color = "#ff0000"
border_right_color = "#00ff00"
border_bottom_color = "#0000ff"
border_left_color = "#ff00ff"

# Style for occupied views (views with clients)
[[style]]
kind = "views_occupied"
foreground = "#b8b8b8"

# Style for visible views
[[style]]
kind = "views_visible"
foreground = "#b8b8b8"

# Style for separator
[[style]]
kind = "separator"
separator = "|"

# Style for focus window title
[[style]]
kind = "title"
foreground = "#fecf35"
width = 50

# Style for urgent window titles and views
[[style]]
kind = "urgent"
foreground = "#ff9800"

# Style for active/inactive windows
[[style]]
kind = "clients"
active = "#303030"
inactive = "#202020"
margin = 5
padding = 5
border_width = 2

# Style for top panel
#[[style]]
#kind = "top_panel"

# Style for tray
#[[style]]
#kind= "tray"

# == Panel

# There are two possible # panels per screen in subtle. Each panel can be configured
# with different # panel items and sublets screen wise. The default config uses a top
# panel # on the first screen only, it's up to the user to enable the bottom panel or
# disable either one # or both.
#
# Following items are available for the panels:
#
# [*:views*]     List of views with buttons
# [*:title*]     Title of the current active window
# [*:tray*]      Systray icons (Can be used only once)
# [*:keychain*]  Display current chain (Can be used only once)
# [*:sublets*]   Catch-all for installed sublets
# [*:sublet*]    Name of a sublet for direct placement
# [*:spacer*]    Variable spacer (free width / count of spacers)
# [*:center*]    Enclose items with :center to center them on the panel
# [*:separator*] Insert separator

# Empty panels are hidden.
#
# === Links
#
# https://subtle.rs/projects/subtle/wiki/Panel

# Time panel
[[panel]]
name = "time"
interval = 60
script = """
print("12:00")
"""

#
# == Gravities
#
# Gravities are predefined sizes a window can be set to. There are several ways
# to set a certain gravity, most convenient is to define a gravity via a tag or
# change them during runtime via grab. Subtler and subtlext can also modify
# gravities.
#
# A gravity consists of four values which are a percentage value of the screen
# size. The first two values are x and y starting at the center of the screen
# and he last two values are the width and height.
#
# === Example
#
# Following defines a gravity for a window with 100% width and height:
#
#   gravity.example = [ 0, 0, 100, 100 }
#
# === Link
#
# https://subtle.rs/projects/subtle/wiki/Gravity
#

[[gravity]]
name = "top_left"
x = 0
y = 0
width = 50
height = 50

[[gravity]]
name   = "top_left66"
x      = 0
y      = 0
width  = 50
height = 66

[[gravity]]
name   = "top_left33"
x      = 0
y      = 0
width  = 50
height = 34

# Top
[[gravity]]
name   = "top"
x      = 0
y      = 0
width  = 100
height = 50

[[gravity]]
name   = "top66"
x      = 0
y      = 0
width  = 100
height = 66

[[gravity]]
name   = "top33"
x      = 0
y      = 0
width  = 100
height = 34

# Top right
[[gravity]]
name   = "top_right"
x      = 50
y      = 0
width  = 50
height = 50

[[gravity]]
name   = "top_right66"
x      = 50
y      = 0
width  = 50
height = 66

[[gravity]]
name   = "top_right33"
x      = 50
y      = 0
width  = 50
height = 33

# Left
[[gravity]]
name   = "left"
x      = 0
y      = 0
width  = 50
height = 100

[[gravity]]
name   = "left66"
x      = 0
y      = 0
width  = 66
height = 100

[[gravity]]
name   = "left33"
x      = 0
y      = 0
width  = 33
height = 100

# Center
[[gravity]]
name   = "center"
x      = 0
y      = 0
width  = 100
height = 100

[[gravity]]
name   = "center66"
x      = 17
y      = 17
width  = 66
height = 66

[[gravity]]
name   = "center33"
x      = 33
y      = 33
width  = 33
height = 33

# Right
[[gravity]]
name   = "right"
x      = 50
y      = 0
width  = 50
height = 100

[[gravity]]
name   = "right66"
x      = 34
y      = 0
width  = 66
height = 100

[[gravity]]
name   = "right33"
x      = 67
y      = 0
width  = 33
height = 100

# Bottom left
[[gravity]]
name   = "bottom_left"
x      = 0
y      = 50
width  = 50
height = 50

[[gravity]]
name   = "bottom_left66"
x      = 0
y      = 34
width  = 50
height = 66

[[gravity]]
name   = "bottom_left33"
x      = 0
y      = 67
width  = 50
height = 33

# Bottom
[[gravity]]
name   = "bottom"
x      = 0
y      = 50
width  = 100
height = 50

[[gravity]]
name   = "bottom66"
x      = 0
y      = 34
width  = 100
height = 66

[[gravity]]
name   = "bottom33"
x      = 0
y      = 67
width  = 100
height = 33

# Bottom right
[[gravity]]
name   = "bottom_right"
x      = 50
y      = 50
width  = 50
height = 50

[[gravity]]
name   = "bottom_right66"
x      = 50
y      = 34
width  = 50
height = 66

[[gravity]]
name   = "bottom_right33"
x      = 50
y      = 67
width  = 50
height = 33

# Gimp
[[gravity]]
name   = "gimp_image"
x      = 10
y      = 0
width  = 80
height = 100

[[gravity]]
name   = "gimp_toolbox"
x      = 0
y      = 0
width  = 10
height = 100

[[gravity]]
name   = "gimp_dock"
x      = 90
y      = 0
width  = 10
height = 100

#
# == Grabs
#
# Grabs are keyboard and mouse actions within subtle, every grab can be
# assigned either to a key and/or to a mouse button combination. A grab
# consists of a chain and an action.
#
# === Finding keys
#
# The best resource for getting the correct key names is
# */usr/include/X11/keysymdef.h*, but to make life easier here are some hints
# about it:
#
# * Numbers and letters keep their names, so *a* is *a* and *0* is *0*
# * Keypad keys need *KP_* as prefix, so *KP_1* is *1* on the keypad
# * Strip the *XK_* from the key names if looked up in
#   /usr/include/X11/keysymdef.h
# * Keys usually have meaningful english names
# * Modifier keys have special meaning (Alt (A), Control (C), Meta (M),
#   Shift (S), Super (W))
#
# === Chaining
#
# Chains are a combination of keys and modifiers to one or a list of keys
# and can be used in various ways to trigger an action. In subtle, there are
# two ways to define chains for grabs:
#
#   1. *Default*: Add modifiers to a key and use it for a grab
#
#      *Example*: grab "W-Return", "urxvt"
#
#   2. *Chain*: Define a list of grabs that need to be pressed in order
#
#      *Example*: grab "C-y Return", "urxvt"
#
# ==== Mouse buttons
#
# [*B1*]  = Button1 (Left mouse button)
# [*B2*]  = Button2 (Middle mouse button)
# [*B3*]  = Button3 (Right mouse button)
# [*B4*]  = Button4 (Mouse wheel up)
# [*B5*]  = Button5 (Mouse wheel down)
# [*...*]
# [*B20*] = Button20 (Are you sure that this is a mouse and not a keyboard?)
#
# ==== Modifiers
#
# [*A*] = Alt key (Mod1)
# [*C*] = Control key
# [*M*] = Meta key (Mod3)
# [*S*] = Shift key
# [*W*] = Super/Windows key (Mod4)
# [*G*] = Alt Gr (Mod5)
#
# === Action
#
# An action is something that happens when a grab is activated, this can be one
# of the following:
#
# [*symbol*] Run a subtle action
# [*string*] Start a certain program
# [*array*]  Cycle through gravities
# [*lambda*] Run a Ruby proc
#
# === Example
#
# This will create a grab that starts a urxvt when Alt+Enter are pressed:
#
#   grab "A-Return", "urxvt"
#   grab "C-a c",    "urxvt"
#
# === Link
#
# https://subtle.rs/projects/subtle/wiki/Grabs
#

[grabs]
# Jump to view1, view2, ...
view_jump1 = "A-S-1"
view_jump2 = "A-S-2"
view_jump3 = "A-S-3"
view_jump4 = "A-S-4"

# Switch current view
view_switch1 = "A-1"
view_switch2 = "A-2"
view_switch3 = "A-3"
view_switch4 = "A-4"

# Select next and prev view */
view_next = "KP_Add"
view_prev = "KP_Subtract"

# Move mouse to screen1, screen2, ...
screen_jump1 = "A-C-1"
screen_jump2 = "A-C-2"
screen_jump3 = "A-C-3"
screen_jump4 = "A-C-4"

# Force reload of config and sublets
subtle_reload = "A-C-r"

# Force restart of subtle
subtle_restart = "A-C-S-r"

# Quit subtle
subtle_quit = "A-C-q"

# Move current window
window_move = "A-B1"

# Resize current window
window_resize = "A-B3"

# Toggle floating mode of window
window_float = "A-f"

# Toggle fullscreen mode of window
window_full = "A-space"

# Toggle sticky mode of window (will be visible on all views)
window_stick = "A-s"

# Toggle zaphod mode of window (will span across all screens)
window_zaphod = "A-equal"

# Raise window
window_raise = "A-r"

# Lower window
window_lower = "A-l"

# Select next windows
window_left = "A-Left"
window_down = "A-Down"
window_up = "A-Up"
window_right = "A-Right"

# Kill current window
window_kill = "A-S-k"

# Cycle between given gravities
#gravity_cycles = [
#    { "W-KP_7" = [ "top_left", "top_left66", "top_left33" ] },
#    { "W-KP_8" = [ "top", "top66", "top33" ] },
#    { "W-KP_9" = [ "top_right", "top_right66", "top_right33" ] },
#    { "W-KP_4" = [ "left", "left66", "left33" ] },
#    { "W-KP_5" = [ "center", "center66", "center33" ] },
#    { "W-KP_6" = [ "right", "right66", "right33" ] },
#    { "W-KP_1" = [ "bottom_left", "bottom_left66", "bottom_left33" ] },
#    { "W-KP_2" = [ "bottom", "bottom66", "bottom33" ] },
#    { "W-KP_3" = [ "bottom_right", "bottom_right66", "bottom_right33" ] }
#]

#
# == Tags
#
# Tags are generally used in subtle for placement of windows. This placement is
# strict, that means that - aside from other tiling window managers - windows
# must have a matching tag to be on a certain view. This also includes that
# windows that are started on a certain view will not automatically be placed
# there.
#
# There are to ways to define a tag:
#
# === Simple
#
# The simple way just needs a name and a regular expression to just handle the
# placement:
#
# Example:
#
#  tag "terms", "xterm|[u]?rxvt"
#
# === Extended
#
# Additionally tags can do a lot more then just control the placement - they
# also have properties than can define and control some aspects of a window
# like the default gravity or the default screen per view.
#
# Example:
#
#  tag "terms" do
#    match   "xterm|[u]?rxvt"
#    gravity :center
#  end
#
# === Default
#
# Whenever a window has no tag it will get the default tag and is placed on the
# default view. The default view can either be set by the user by adding the
# default tag to a view by choice or otherwise the first defined view will be
# chosen automatically.
#
# === Modes
#
# Modes can be set with the set option, see below.
#
# [*borderless*] Enable the borderless mode for tgagged clients. When set, any borders
#                around tagged clients are absent.
#
#                Example: set :borderless
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Borderless
#                         https://subtle.rs/projects/subtle/wiki/Clients#Borderless
#
# [*fixed*]      Enable the fixed mode for tagged clients. When set, the client cannot be
#                resized anymore.
#
#                Example: set :fixed
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Fixed
#                         https://subtle.rs/projects/subtle/wiki/Clients#Fixed
#
# [*floating*]   Enables the float mode for tagged clients.
#
#                Example: set :floating
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Floating
#                         https://subtle.rs/projects/subtle/wiki/Clients#Floating
#
# [*full*]       Enable the fullscreen mode for tagged clients. When set, the client
#                covers the whole screen size.
#
#                Example: set :full
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Fullscreen
#                         https://subtle.rs/projects/subtle/wiki/Clients#Fullscreen
#
# [*resize*]     Enable resize mode for tagged clients. When set, subtle honors size
#                hints, that define various size constraints like sizes for columns
#                and rows of a terminal.
#
#                Example: set :resize
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Resize
#                         https://subtle.rs/projects/subtle/wiki/Clients#Resize
#
# [*sticky*]     Enable sticky mode for tagged clients. When set, subtle keeps the
#                client on the current screen, regardless of the tags.
#
#                Example: set :sticky
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Sticky
#
# [*urgent*]     Enables the urgent mode for tagged clients. When set, subtle
#                automatically sets this client to urgent.
#
#                Urgent usually means the window requires immediate attention like
#                a visual bell in a term.
#
#                Example: set :urgent
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Stick
#                         https://subtle.rs/projects/subtle/wiki/Clients#Urgent
#
# [*zaphod*]     Enables the zaphod mode for tagged clients. When set, the client
#                spans across all connected screens.
#
#                Example: set :zaphod
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Zaphod
#                         https://subtle.rs/projects/subtle/wiki/Clients#Zaphod
#
# === Options
#
# [*set*]        Set various modes to the tagged client. Multiple modes can be set,
#                separated by comma. (See Modes)
#
#                Example: set :floating, :sticky
#
# [*geometry*]   Set a certain geometry for the tagged client and put it in
#                floating mode, but only on views that have this tag in common.
#                Expected is an array with x, y, width and height values whereas
#                width and height must be >0.
#
#                Example: geometry [100, 100, 50, 50]
#                Link:    https://subtle.rs/projects/subtle/wiki/Tagging#Geometry
#
# [*gravity*]    Set a certain to gravity to the tagged client, but only on views
#                that have this tag in common.
#
#                Example: gravity :center
#                Link:    https://subtle.rs/projects/subtle/wiki/Tagging#Gravity
#
# [*match*]      Add matching patterns to a tag, this can be done more than once.
#
#                Matching works either via plaintext, regular expressions
#                (see man regex(7)) or window id. Per default tags will only match
#                the WM_NAME and the  WM_CLASS portion of a client, this can be
#                changed with following possible values:
#
#                [*:name*]      Match the WM_NAME
#                [*:instance*]  Match the first (instance) part from WM_CLASS
#                [*:class*]     Match the second (class) part from WM_CLASS
#                [*:role*]      Match the window role
#                [*:type*]      Match the window type
#
#                Examples: match instance: "urxvt"
#                          match [:role, :class] => "test"
#                          match "[xa]+term"
#                Link:     https://subtle.rs/projects/subtle/wiki/Tagging#Match
#
# [*on_match*]   Add a Ruby proc that is executed when this tag matches
#
#                Example:
#
#                tag "gimp" do
#                  match role: "gimp.*"
#
#                  on_match do |c|
#                    c.gravity = ("gimp_" + c.role.split("-")[1]).to_sym
#                   end
#                 end
#
# [*position*]   Similar to the geometry option, set the x/y coordinates of the
#                tagged client for views with common tags.
#
#                Expected is an array with x and y values.
#
#                Example: position [ 10, 10 ]
#                Link:    https://subtle.rs/projects/subtle/wiki/Tagging#Position
#
# [*stick_to*]   Keep a tagged client on the given screen. When set, clients are
#                visible on all views, even when they don't have matching tags.
#
#                On multihead, sticky clients keep the screen they are assigned to.
#
#                Example: stick_to 1
#                Links:   https://subtle.rs/projects/subtle/wiki/Tagging#Stick
#                         https://subtle.rs/projects/subtle/wiki/Clients#Stick
#
# [*type*]       Set the window type of the tagged client, this will force it to be
#                treated as a specific window type though as the window sets the type by
#                itself.
#
#                Following types are possible:
#
#                [*:desktop*]  Treat as desktop window (_NET_WM_WINDOW_TYPE_DESKTOP)
#                              Link: https://subtle.rs/projects/subtle/wiki/Clients#Desktop
#                [*:dock*]     Treat as dock window (_NET_WM_WINDOW_TYPE_DOCK)
#                              Link: https://subtle.rs/projects/subtle/wiki/Clients#Dock
#                [*:toolbar*]  Treat as toolbar windows (_NET_WM_WINDOW_TYPE_TOOLBAR)
#                              Link: https://subtle.rs/projects/subtle/wiki/Clients#Toolbar
#                [*:splash*]   Treat as splash window (_NET_WM_WINDOW_TYPE_SPLASH)
#                              Link: https://subtle.rs/projects/subtle/wiki/Clients#Splash
#                [*:dialog*]   Treat as dialog window (_NET_WM_WINDOW_TYPE_DIALOG)
#                              Link: https://subtle.rs/projects/subtle/wiki/Clients#Dialog
#
#                Example: type :desktop
#                Link:    https://subtle.rs/projects/subtle/wiki/Tagging#Type
#
# === Link
#
# https://subtle.rs/projects/subtle/wiki/Tagging
#

# Simple tags
[[tag]]
name = "terms"
match = "xterm|[u]?rxvt|alacritty"

[[tag]]
name = "browser"
match = "opera|firefox|(google-)?chrom[e|ium]"

# Placement
[[tag]]
name = "editor"
match = "[g]?vim"

[[tag]]
name = "fixed"
geometry = [ 10, 10, 100, 100 ]
sticky = true

[[tag]]
name = "resize"
match = "sakura|gvim"
resize = true

[[tag]]
name = "gravity"
gravity = "center"

#
# == Views
#
# Views are the virtual desktops in subtle, they show all windows that share a
# tag with them. Windows that have no tag will be visible on the default view
# which is the view with the default tag or the first defined view when this
# tag isn't set.
#
# Like tags views can be defined in two ways:
#
# === Simple
#
# The simple way is exactly the same as for tags:
#
# Example:
#
#   view "terms", "terms"
#
# === Extended
#
# The extended way for views is also similar to the tags, but with fewer
# properties.
#
# Example:
#
#  view "terms" do
#    match "terms"
#    icon  "/usr/share/icons/icon.xbm"
#  end
#
# === Modes
#
# Modes can be set with the set option, see below.
#
# [*dynamic*]    Enable dynamic mode for views. When set, icons of unoccupied views (views that display no
#                windows) are hidden.
#
#                Example: set :dynamic
#                Links:   https://subtle.rs/projects/subtle/wiki/Views#Dynamic
#
# [*icon_only*]  Enable icon only mode. When set, subtle hides the view name from the view buttons, just
#                the icon will be visible.
#
#                Example: set :icon_only
#                Links:   https://subtle.rs/projects/subtle/wiki/Views#Icon_only
#
# === Options
#
# [*set*]        Set various modes to views. Multiple modes can be set,
#                separated by comma. (See Modes)
#
#                Example: set :dynamic, :icon_only
#
# [*match*]      This property adds a matching pattern to a view. Matching
#                works either via plaintext or regex (see man regex(7)) and
#                applies to names of tags.
#
#                Example: match "terms"
#
#
# [*icon*]       This property adds an icon in front of the view name. The
#                icon can either be path to an icon or an instance of
#                Subtlext::Icon.
#
#                Example: icon "/usr/share/icons/icon.xbm"
#                         icon Subtlext::Icon.new("/usr/share/icons/icon.xbm")
#
# === Link
#
# https://subtle.rs/projects/subtle/wiki/Tagging
#

[[view]]
name = "terms"
match = "terms"
icon_only = false
icon = "/home/unexist/.local/share/icons/black_diamond_with_question_mark.xbm"

[[view]]
name = "wwww"
match = "browser"
icon = "/home/unexist/.local/share/icons/black_diamond_with_question_mark.xbm"

[[view]]
name = "gimp"
match = "gimp_.*"
icon_only = true
icon = "/home/unexist/.local/share/icons/black_diamond_with_question_mark.xbm"

[[view]]
name = "dev"
match = "editor"
icon = "/home/unexist/.local/share/icons/black_diamond_with_question_mark.xbm"

#
# == Screens
#
# Subtle usually creates screens based on the information it gathers from X
# and xrandr runtime.
#
# To allow more flexibility, subtle can split physically screens into virtual
# ones and low to see multiple views on screen per virtual screen.
#
# === Link
# https://subtle.rs/projects/subtle/wiki/Multihead
#

# Screen 1
[[screen]]
top_panel = [ "tray", "views", "time", "center", "title", "center" ]
bottom_panel = [ ]
#virtual = [ [ 0, 0, 50, 50 ], [ 0, 0, 50, 50 ] ]

# Panel for screen 2
[[screen]]
top_panel = [ ]
bottom_panel = [ ]
